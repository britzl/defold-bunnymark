local function load(self, proxy_url)
	msg.post(proxy_url, "load")
	self.current_proxy = proxy_url
end

function init(self)
	math.randomseed(os.time())
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.4, 0.5, 0.8, 1.0) } )
	self.menu_enabled = true
	
	self.test_root_node = gui.get_node("test_root")
	self.toggle_profiler_node = gui.get_node("toggle_profiler")
	self.back_node = gui.get_node("back")
	gui.set_enabled(self.test_root_node, false)

	self.menu_root_node = gui.get_node("menu_root")
	self.go_animate_node = gui.get_node("go_animate")
	self.go_animate_multiple_node = gui.get_node("go_animate_multiple")
	self.update_single_node = gui.get_node("update_single")
	self.update_many_node = gui.get_node("update_many")
	self.particlefx_node = gui.get_node("particlefx")
	self.gui_animate_node = gui.get_node("gui_animate")
	self.update_native_position = gui.get_node("update_native_position")
	self.update_native_position_velocity = gui.get_node("update_native_position_velocity")

	gui.set_text(gui.get_node("version"), sys.get_engine_info().version)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
		self.menu_enabled = false
		gui.set_enabled(self.test_root_node, true)
		gui.set_enabled(self.menu_root_node, false)
	elseif message_id == hash("proxy_unloaded") then
		self.menu_enabled = true
		gui.set_enabled(self.test_root_node, false)
		gui.set_enabled(self.menu_root_node, true)
	end
end

function on_input(self, action_id, action)
	if self.menu_enabled then
		if action_id == hash("touch") and action.released then
			if gui.pick_node(self.go_animate_node, action.x, action.y) then
				load(self, "#go_animate_proxy")
			elseif gui.pick_node(self.update_single_node, action.x, action.y) then
				load(self, "#update_single_proxy")
			elseif gui.pick_node(self.update_many_node, action.x, action.y) then
				load(self, "#update_many_proxy")
			elseif gui.pick_node(self.particlefx_node, action.x, action.y) then
				load(self, "#particlefx_proxy")
			elseif gui.pick_node(self.go_animate_multiple_node, action.x, action.y) then
				load(self, "#go_animate_multiple_proxy")
			elseif gui.pick_node(self.gui_animate_node, action.x, action.y) then
				load(self, "#gui_animate_proxy")
			elseif gui.pick_node(self.update_native_position, action.x, action.y) then
				load(self, "#update_native_position_proxy")
			elseif gui.pick_node(self.update_native_position_velocity, action.x, action.y) then
				load(self, "#update_native_position_velocity_proxy")
			end
		end
	else
		if action_id == hash("touch") and action.released then
			if gui.pick_node(self.back_node, action.x, action.y) then
				msg.post(self.current_proxy, "unload")
			elseif gui.pick_node(self.toggle_profiler_node, action.x, action.y) then
				msg.post("@system:", "toggle_profile")
			end
		end
	end
end
